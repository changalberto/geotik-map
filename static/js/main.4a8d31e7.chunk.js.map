{"version":3,"sources":["constants/environment.js","__mock__/annotatedData.geojson","utils/map-utils.js","components/Map.js","components/RadialStackedBars.js","components/Select/Select.js","App.js","services/GeoData.js","reportWebVitals.js","index.js"],"names":["REACT_APP_MAPBOX_TOKEN","process","MAPBOX_TOKEN","colorScale","range","max","scaleLinear","domain","ambientLight","AmbientLight","color","intensity","dirLight","SunLight","timestamp","Date","UTC","_shadow","material","ambient","diffuse","shininess","specularColor","initilaViewState","latitude","longitude","zoom","minZoom","pitch","bearing","Map","data","token","width","height","selectedFeatureId","selectedYear","onPolygonClick","props","_maxTotal","Math","features","map","properties","total","getTotalOrNA","value","isNull","layers","GeoJsonLayer","id","opacity","stroked","filled","extruded","wireframe","getElevation","getFillColor","MapUtils","getLineColor","pickable","onClick","info","featureId","find","_filterFeatureById","effects","useState","lightingEffect","LightingEffect","shadowColor","initialViewState","controller","getTooltip","object","html","name","mapStyle","reuseMaps","mapboxApiAccessToken","preventStyleDiffing","defaultProps","RadialStackedBars","innerRadius","onStackSelected","svg","setSvg","outerRadius","min","columns","useMemo","_data","label","reduce","accum","current","x","d3","d","PI","align","y","z","arc","startAngle","endAngle","bandwidth","padAngle","padRadius","useEffect","_drawChartCanvas","selectAll","style","className","_svg","append","attr","_drawStackBars","call","_yAxis","_legend","_labels","series","keys","join","key","on","this","baseVal","getAttribute","g","ticks","pop","text","slice","tickFormat","clone","enter","reverse","i","length","Select","options","placeholder","onChange","selected","disabled","Options","e","target","App","imparedVehiclesData","setImparedVehiclesData","setSelectedFeatureId","setSelectedYear","async","geoJSON","fetch","geoData","then","resp","json","getImparedVehicles","fetchData","_getYearOptionsByFeatureId","useCallback","selectedFeature","isEmpty","Object","filter","startsWith","year","_handleNeighboorhoodChange","neighborhoodOptions","selectedYearOptions","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a8d31e7.chunk.js","sourcesContent":["const { REACT_APP_MAPBOX_TOKEN } = process.env\n\nexport const MAPBOX_TOKEN = REACT_APP_MAPBOX_TOKEN\n","export default __webpack_public_path__ + \"static/media/annotatedData.1c0147e5.geojson\";","import { scaleLinear } from 'd3-scale'\n\n// https://github.com/visgl/deck.gl/blob/8.6-release/examples/website/geojson/app.js\nexport const colorScale = (range = 0, max = 10) =>\n  scaleLinear()\n    .domain([0, max])\n    .range([\n      [255, 217, 217],\n      [255, 124, 10],\n    ])(range)\n","// Vendor Imports\nimport { useState } from 'react'\nimport {\n  MapView,\n  LightingEffect,\n  AmbientLight,\n  _SunLight as SunLight,\n} from '@deck.gl/core'\nimport { GeoJsonLayer } from '@deck.gl/layers'\nimport DeckGL from '@deck.gl/react'\nimport { StaticMap } from 'react-map-gl'\nimport { isNull } from 'lodash'\n\n// Source Imports\nimport * as MapUtils from 'utils/map-utils'\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n})\n\nconst dirLight = new SunLight({\n  timestamp: Date.UTC(2019, 7, 1, 22),\n  color: [255, 255, 255],\n  intensity: 1.0,\n  _shadow: true,\n})\n\n// https://deck.gl/docs/api-reference/layers/polygon-layer\n// This is an object that contains material props for lighting effect applied on extruded polygons.\n// Check the lighting guide for configurable settings.\nconst material = {\n  ambient: 0.64,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [51, 51, 51],\n}\n\n// Center into DC coordinates\nconst DC_COORDINATES = {\n  latitude: 38.895,\n  longitude: -77.0366,\n}\n\nconst initilaViewState = {\n  ...DC_COORDINATES,\n  zoom: 11,\n  minZoom: 8,\n  pitch: 55,\n  bearing: 0,\n}\n\n// https://visgl.github.io/react-map-gl/docs/api-reference/interactive-map\nconst Map = ({\n  data,\n  token,\n  width,\n  height,\n  selectedFeatureId,\n  selectedYear,\n  onPolygonClick,\n  ...props\n}) => {\n  const _maxTotal = Math.max(\n    ...[...data?.features].map(({ properties }) => properties.total)\n  )\n\n  const _filterFeatureById = (featureId) => {\n    const { features } = data\n    return { ...data, features: [features.find(({ id }) => id === featureId)] }\n  }\n\n  const _getTooltip = ({ object }) => {\n    if (object) {\n      const { properties } = object\n      return {\n        html: `\n          <div style=\"font-size: 16px; margin-bottom: 7px;\"><b>${\n            properties.name\n          }</b> (${getTotalOrNA(properties.total)})</div>\n          <div style=\"font-size: 12px;\"><b>2010</b>: ${getTotalOrNA(\n            properties[2010]\n          )}</div>\n          <div style=\"font-size: 12px;\"><b>2011</b>: ${getTotalOrNA(\n            properties[2011]\n          )}</div>\n          <div style=\"font-size: 12px;\"><b>2012</b>: ${getTotalOrNA(\n            properties[2012]\n          )}</div>\n          <div style=\"font-size: 12px;\"><b>2013</b>: ${getTotalOrNA(\n            properties[2013]\n          )}</div>\n          <div style=\"font-size: 12px;\"><b>2014</b>: ${getTotalOrNA(\n            properties[2014]\n          )}</div>\n        `,\n      }\n    }\n    return null\n  }\n\n  const getTotalOrNA = (value) => {\n    return isNull(value) ? 'N/A' : value\n  }\n\n  const layers = [\n    // Flat Polygons Layer\n    new GeoJsonLayer({\n      id: 'flat-polygons-layer',\n      data,\n      opacity: 0.8,\n      stroked: true,\n      filled: true,\n      extruded: false,\n      wireframe: true,\n      getElevation: 0,\n      getFillColor: ({ properties }) =>\n        MapUtils.colorScale(properties?.total, _maxTotal),\n      getLineColor: [0, 0, 0],\n      pickable: true,\n      onClick: (info) => onPolygonClick(info),\n    }),\n\n    // Extruded Polygons Layer\n    !isNull(selectedFeatureId) &&\n      new GeoJsonLayer({\n        id: 'extruded-polygons-layer',\n        data: _filterFeatureById(selectedFeatureId),\n        opacity: 0.7,\n        stroked: false,\n        filled: true,\n        extruded: true,\n        wireframe: true,\n        getElevation: ({ properties }) =>\n          Math.max(\n            selectedYear && selectedYear !== 'null'\n              ? properties?.[selectedYear]\n              : properties?.total || 0,\n            1\n          ) * 60, // Accument elevation by 60 times for extrution emphasis\n        getFillColor: ({ properties }) =>\n          MapUtils.colorScale(properties?.total, _maxTotal),\n        getLineColor: [0, 0, 0],\n        material,\n        pickable: true,\n      }),\n  ]\n\n  const [effects] = useState(() => {\n    const lightingEffect = new LightingEffect({ ambientLight, dirLight })\n    lightingEffect.shadowColor = [0, 0, 0, 0.5]\n    return [lightingEffect]\n  })\n\n  return (\n    <DeckGL\n      initialViewState={{ ...initilaViewState }}\n      layers={layers}\n      effects={effects}\n      controller={true}\n      getTooltip={_getTooltip}\n    >\n      <MapView id=\"map\" width={width} controller={true}>\n        <StaticMap\n          mapStyle=\"mapbox://styles/mapbox/light-v10\"\n          reuseMaps\n          mapboxApiAccessToken={token}\n          preventStyleDiffing={true}\n        />\n      </MapView>\n    </DeckGL>\n  )\n}\n\nMap.defaultProps = {\n  width: '100%',\n  height: '100vh',\n  selectedFeatureId: null,\n  selectedYear: null,\n  onPolygonClick: (info) => {},\n}\n\nexport default Map\n","import { useEffect, useState, useMemo } from 'react'\nimport * as d3 from 'd3'\nimport isNull from 'lodash/isNull'\n\nconst RadialStackedBars = ({\n  width,\n  height,\n  innerRadius,\n  data,\n  selectedFeatureId,\n  selectedYear,\n  onStackSelected,\n  ...props\n}) => {\n  const [svg, setSvg] = useState(null)\n  const outerRadius = Math.min(width, height) / 2\n  const columnsColors = ['#98abc5', '#8a89a6', '#7b6888', '#d0743c', '#ff8c00']\n  const columns = useMemo(() => [2010, 2011, 2012, 2013, 2014], [])\n\n  // Memoize transformed data for D3 consumption\n  const _data = useMemo(\n    () =>\n      data.map(({ id, properties }) => {\n        return {\n          id,\n          label: properties.name,\n          ...columns.reduce(\n            (accum, current) => ({\n              ...accum,\n              [current]: !isNull(properties[current]) ? properties[current] : 0,\n            }),\n            {}\n          ),\n          total: !isNull(properties.total) ? properties.total : 0,\n        }\n      }),\n    [data, columns]\n  )\n\n  const x = d3\n    .scaleBand()\n    .domain(_data.map((d) => d.label))\n    .range([0, 2 * Math.PI])\n    .align(0)\n  const y = d3\n    .scaleRadial()\n    .domain([0, d3.max(_data, (d) => d.total)])\n    .range([innerRadius, outerRadius])\n  const z = d3.scaleOrdinal().domain(columns).range(columnsColors)\n  const arc = d3\n    .arc()\n    .innerRadius((d) => y(d[0]))\n    .outerRadius((d) => y(d[1]))\n    .startAngle((d) => x(d.data.label))\n    .endAngle((d) => {\n      return x(d.data.label) + x.bandwidth()\n    })\n    .padAngle(0.01)\n    .padRadius(innerRadius)\n\n  // Initial Mount\n  useEffect(() => {\n    !svg && _drawChartCanvas()\n  }, [])\n\n  useEffect(() => {\n    if (svg) {\n      if (!selectedFeatureId) {\n        svg.selectAll(`path`).style('opacity', 1)\n        return\n      }\n      const className = `class-${selectedFeatureId}`\n      svg.selectAll(`path.${className}`).style('opacity', 1)\n      svg.selectAll(`path:not(.${className})`).style('opacity', 0.3)\n    }\n  }, [svg, selectedFeatureId])\n\n  const _drawChartCanvas = () => {\n    const _svg = d3\n      .select('.radial-stacked-bars')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', `${-width / 2} ${-height / 2} ${width} ${height}`)\n      .style('width', '100%')\n      .style('height', 'auto')\n      .style('margin', 'auto')\n      .style('font', '10px sans-serif')\n\n    _drawStackBars(_svg)\n\n    // Add measurement rings\n    _svg.append('g').call(_yAxis)\n\n    // Add Legend to the Center of the Graph\n    _svg.append('g').call(_legend)\n\n    // Add the labels\n    _labels(_svg)\n\n    setSvg(_svg)\n  }\n\n  const _drawStackBars = (svg) => {\n    const series = d3.stack().keys(columns)(_data)\n    svg\n      .append('g')\n      .selectAll('g')\n      .data(series)\n      .join('g')\n      .attr('fill', (d) => z(d.key))\n      .selectAll('path')\n      .data((d) => d)\n      .join('path')\n      .attr('class', (d) => `class-${d.data.id}`)\n      .attr('data-id', (d) => d.data.id)\n      .attr('d', arc)\n      .on('click', function (d) {\n        const className = this.className?.baseVal\n        const id = this.getAttribute('data-id')\n        svg.selectAll(`path.${className}`).style('opacity', 1)\n        svg.selectAll(`path:not(.${className})`).style('opacity', 0.3)\n        onStackSelected(id)\n      })\n  }\n\n  const _yAxis = (g) =>\n    g\n      .attr('text-anchor', 'middle')\n      .call((g) =>\n        g\n          .append('text')\n          .attr('y', (d) => -y(y.ticks(5).pop()))\n          .attr('dy', '-1em')\n          .attr('fill', '#666')\n          .style('font', 'bold 16px sans-serif')\n          .attr('stroke', '#fff')\n          .attr('stroke-linejoin', 'round')\n          .attr('stroke-width', 1)\n          .text('Accidents')\n      )\n      .call((g) =>\n        g\n          .selectAll('g')\n          .data(y.ticks(5).slice(1))\n          .join('g')\n          .attr('fill', 'none')\n          .call((g) =>\n            g\n              .append('circle')\n              .attr('stroke', '#999')\n              .attr('stroke-opacity', 0.5)\n              .attr('r', y)\n          )\n          .call((g) =>\n            g\n              .append('text')\n              .attr('y', (d) => -y(d))\n              .attr('dy', '0.35em')\n              .attr('stroke', '#fff')\n              .attr('stroke-width', 5)\n              .text(y.tickFormat(5, 's'))\n              .clone(true)\n              .attr('fill', '#999')\n              .attr('stroke', 'none')\n          )\n      )\n\n  const _labels = (svg) => {\n    svg\n      .append('g')\n      .selectAll('g')\n      .data(_data)\n      .enter()\n      .append('g')\n      .attr('text-anchor', function (d) {\n        return (x(d.label) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) <\n          Math.PI\n          ? 'end'\n          : 'start'\n      })\n      .attr('transform', function (d) {\n        return (\n          'rotate(' +\n          (((x(d.label) + x.bandwidth() / 2) * 180) / Math.PI - 90) +\n          ')' +\n          'translate(' +\n          (y(d['total']) + 10) +\n          ',0)'\n        )\n      })\n      .append('text')\n      .text(function (d) {\n        return d.label\n      })\n      .attr('transform', function (d) {\n        return (x(d.label) + x.bandwidth() / 2 + Math.PI) % (2 * Math.PI) <\n          Math.PI\n          ? 'rotate(180)'\n          : 'rotate(0)'\n      })\n      .style('font-size', '11px')\n      .attr('alignment-baseline', 'middle')\n  }\n\n  const _legend = (g) =>\n    g\n      .append('g')\n      .selectAll('g')\n      .data(columns.reverse())\n      .join('g')\n      .attr(\n        'transform',\n        (d, i) => `translate(-20,${(i - (columns.length - 1) / 2) * 20})`\n      )\n      .call((g) =>\n        g.append('rect').attr('width', 16).attr('height', 18).attr('fill', z)\n      )\n      .call((g) =>\n        g\n          .append('text')\n          .attr('x', 24)\n          .attr('y', 9)\n          .attr('dy', '0.35em')\n          .text((d) => d)\n      )\n\n  return <div className=\"radial-stacked-bars\"></div>\n}\n\nRadialStackedBars.defaultProps = {\n  width: 800,\n  height: 800,\n  innerRadius: 180,\n  onStackSelected: (id) => {},\n}\n\nexport default RadialStackedBars\n","import { useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './Select.scss'\n\nconst Select = ({\n  label,\n  name,\n  options,\n  placeholder,\n  onChange,\n  selected,\n  disabled,\n  ...props\n}) => {\n  const Options = useMemo(\n    () =>\n      options.map(({ value, label }) => (\n        <option key={value} value={`${value}`}>\n          {label}\n        </option>\n      )),\n    [options]\n  )\n\n  const _handleChange = (e) => {\n    onChange(e.target.value)\n  }\n\n  return (\n    <div className=\"select\">\n      {label && <label>{label}</label>}\n      <select\n        name={name}\n        onChange={_handleChange}\n        {...(disabled ? { disabled } : {})}\n        value={`${selected}`}\n      >\n        {placeholder && <option disabled>{placeholder}</option>}\n        {Options}\n      </select>\n    </div>\n  )\n}\n\nSelect.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      label: PropTypes.string,\n    })\n  ),\n  selected: PropTypes.any,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n}\n\nSelect.defaultProps = {\n  name: '[name]',\n  options: [],\n  onChange: () => {},\n}\n\nexport default Select\n","// Vendor Imports\nimport { useState, useEffect, useMemo, useCallback } from 'react'\nimport { isNull, isEmpty } from 'lodash'\n\n// Source Imports\nimport { MAPBOX_TOKEN } from 'constants/environment'\nimport { GeoData } from 'services/GeoData'\nimport Map from 'components/Map'\nimport RadialStackedBars from 'components/RadialStackedBars'\nimport Select from 'components/Select'\n\n// Styles\nimport './App.scss'\n\nfunction App() {\n  const [imparedVehiclesData, setImparedVehiclesData] = useState(null)\n  const [selectedFeatureId, setSelectedFeatureId] = useState(null)\n  const [selectedYear, setSelectedYear] = useState(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const geoJSON = await GeoData.getImparedVehicles()\n      setImparedVehiclesData(geoJSON)\n    }\n    fetchData()\n  }, [])\n\n  // Utility Methods\n\n  // Replaces properties of total null with argument total and returns new array\n  // const _getReplacedNullTotalsWith = (geoJSON, total = 0) => {\n  //   const { features } = geoJSON\n  //   const _features = features.map((feature) => {\n  //     const { properties } = feature\n  //     return properties?.total === null\n  //       ? { ...feature, properties: { ...properties, total } }\n  //       : feature\n  //   })\n  //   return { ...geoJSON, features: _features }\n  // }\n\n  // const _getNeighborhoodOptions = () => {}\n\n  // Finds all available years within feature properties and generates array of year options\n  const _getYearOptionsByFeatureId = useCallback(\n    (id) => {\n      if (!isNull(id)) {\n        const { features } = imparedVehiclesData\n        const selectedFeature = features.find(\n          ({ id }) => id === selectedFeatureId\n        )\n\n        if (!isEmpty(selectedFeature)) {\n          const { properties } = selectedFeature\n          const years = Object.keys(properties).filter((key) =>\n            key.startsWith('20')\n          )\n\n          return [\n            { value: null, label: 'All' },\n            ...years.map((year) => ({ value: year, label: year })),\n          ]\n        }\n      }\n      return [{ value: null, label: 'All' }]\n    },\n    [imparedVehiclesData, selectedFeatureId]\n  )\n\n  // Event Handlers\n  const _handlePolygonClick = ({ object: { id } }) => {\n    setSelectedFeatureId(id)\n  }\n\n  const _handleNeighboorhoodChange = (featureId) => {\n    setSelectedFeatureId(featureId ? +featureId : null)\n    setSelectedYear(null)\n  }\n\n  const _handleYearChange = (year) => setSelectedYear(year)\n\n  const _handleClearFilters = (e) => {\n    e.preventDefault()\n    setSelectedFeatureId(null)\n    setSelectedYear(null)\n  }\n\n  // Memoized Consts\n  const neighborhoodOptions = useMemo(() => {\n    if (imparedVehiclesData) {\n      const { features } = imparedVehiclesData\n\n      return [\n        { value: null, label: 'All' },\n        ...features.map(({ id, properties }) => ({\n          value: id,\n          label: properties?.name,\n        })),\n      ]\n    }\n  }, [imparedVehiclesData])\n\n  const selectedYearOptions = useMemo(\n    () => _getYearOptionsByFeatureId(selectedFeatureId),\n    [_getYearOptionsByFeatureId, selectedFeatureId]\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"map\">\n        {imparedVehiclesData && (\n          <Map\n            data={imparedVehiclesData}\n            width=\"100%\"\n            height=\"100%\"\n            token={MAPBOX_TOKEN}\n            selectedFeatureId={selectedFeatureId}\n            selectedYear={selectedYear}\n            onPolygonClick={_handlePolygonClick}\n          />\n        )}\n      </div>\n      <aside>\n        <header>\n          <h1>Impared Car Accidents</h1>\n          <em>Washington DC, 2010-2014</em>\n        </header>\n        <div className=\"filter-group\">\n          {neighborhoodOptions && (\n            <Select\n              label=\"Neighborhood\"\n              name=\"neighborhood\"\n              options={neighborhoodOptions}\n              onChange={_handleNeighboorhoodChange}\n              selected={selectedFeatureId}\n            />\n          )}\n          {neighborhoodOptions && (\n            <Select\n              label=\"Year\"\n              name=\"year\"\n              options={selectedYearOptions}\n              onChange={_handleYearChange}\n              selected={selectedYear}\n              disabled={isNull(selectedFeatureId)}\n            />\n          )}\n\n          <button\n            className=\"button filter-group__clear-button\"\n            disabled={isNull(selectedFeatureId) && isNull(selectedFeatureId)}\n            onClick={_handleClearFilters}\n          >\n            Clear All\n          </button>\n        </div>\n\n        {imparedVehiclesData && (\n          <RadialStackedBars\n            data={imparedVehiclesData?.features}\n            selectedFeatureId={selectedFeatureId}\n            selectedYear={selectedYear}\n            onStackSelected={_handleNeighboorhoodChange}\n          />\n        )}\n      </aside>\n    </div>\n  )\n}\n\nexport default App\n","import geoData from '__mock__/annotatedData.geojson'\n\nexport class GeoData {\n  static async getImparedVehicles() {\n    return await fetch(geoData)\n      .then((resp) => resp.json())\n      .then((data) => data)\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}